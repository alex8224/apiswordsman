package main

import (
	"context"
	"strconv"

	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"sync"
	"time"

	"github.com/getlantern/systray"
	"github.com/getlantern/systray/example/icon"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/gorilla/websocket"
	"github.com/hooklift/gowsdl"
)

func main() {
	systray.Run(onReady, onExit)
}

type CreateServerReq struct {
	Port        int               `json:"port"`
	Type        string            `json:"type"`
	Data        string            `json:"mockData"`
	ContentType string            `json:"contentType"`
	Headers     map[string]string `json:"headers"`
}

// DynamicServer 结构体用于管理动态创建的服务器
type DynamicServer struct {
	servers       map[int]*http.Server
	serverConfigs map[int]*CreateServerReq
	serversMutex  sync.Mutex
	wsConnections map[*websocket.Conn]map[int]bool
	wsConnMutex   sync.RWMutex
	upgrader      websocket.Upgrader
}

// WSMessage 定义了WebSocket消息的结构
type WSMessage struct {
	Action string      `json:"action"`
	Port   int         `json:"port"`
	Data   interface{} `json:"data,omitempty"`
}

// NewDynamicServer 创建并初始化一个新的 DynamicServer 实例
func NewDynamicServer() *DynamicServer {
	return &DynamicServer{
		servers:       make(map[int]*http.Server),
		serverConfigs: make(map[int]*CreateServerReq),
		wsConnections: make(map[*websocket.Conn]map[int]bool),
		upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				return true
			},
		},
	}
}

func startServer() {
	r := gin.Default()
	r.Static("/static", "./static")
	r.POST("/mockhttp", mockHttpRoute)
	r.POST("/http", httpRoute)
	r.POST("/mllp", mllpRoute)
	r.POST("/soap", soapRoute)
	r.POST("/wsdl-methods", wsdlMethods)

	dynamicServer := NewDynamicServer()
	r.POST("/createserver", dynamicServer.CreateServer)
	r.GET("/ws", dynamicServer.HandleWebSocket)
	r.GET("/listservers", dynamicServer.ListServers)
	r.POST("/stopserver", dynamicServer.StopServer)
	r.GET("/getserver", dynamicServer.GetServerConfig)
	r.POST("/updateserver", dynamicServer.UpdateServer)

	r.Run(":8080")
}

var GrayDat []byte = []byte{
	0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00,
	0x20, 0x00, 0xa8, 0x10, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc6, 0xc6,
	0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc5, 0xc5,
	0xc5, 0x00, 0xca, 0xca, 0xca, 0x1b, 0x66, 0x66, 0x66, 0x6b, 0x21, 0x21,
	0x21, 0xc8, 0x55, 0x55, 0x55, 0xc0, 0x87, 0x87, 0x87, 0x56, 0xd5, 0xd5,
	0xd5, 0x08, 0xd1, 0xd1, 0xd1, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xd2, 0xd2,
	0xd2, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc6, 0xc6,
	0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x00, 0xc5, 0xc5, 0xc5, 0x50, 0xcd, 0xcd,
	0xcd, 0xe9, 0x60, 0x60, 0x60, 0xff, 0x21, 0x21, 0x21, 0xff, 0x55, 0x55,
	0x55, 0xff, 0x86, 0x86, 0x86, 0xff, 0xd6, 0xd6, 0xd6, 0xcd, 0xd1, 0xd1,
	0xd1, 0x36, 0xd2, 0xd2, 0xd2, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xd2, 0xd2,
	0xd2, 0x00, 0xd2, 0xd2, 0xd2, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xcb, 0xcb,
	0xcb, 0x00, 0xcb, 0xcb, 0xcb, 0x00, 0xcb, 0xcb, 0xcb, 0x00, 0xcb, 0xcb,
	0xcb, 0x00, 0xca, 0xca, 0xca, 0xac, 0xd2, 0xd2, 0xd2, 0xff, 0x59, 0x59,
	0x59, 0xff, 0x20, 0x20, 0x20, 0xff, 0x55, 0x55, 0x55, 0xff, 0x83, 0x83,
	0x83, 0xff, 0xda, 0xda, 0xda, 0xff, 0xd5, 0xd5, 0xd5, 0x9e, 0xd5, 0xd5,
	0xd5, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd5, 0xd5,
	0xd5, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xd0, 0xd0,
	0xd0, 0x00, 0xd0, 0xd0, 0xd0, 0x00, 0xd0, 0xd0, 0xd0, 0x12, 0xd1, 0xd1,
	0xd1, 0xe3, 0xd7, 0xd7, 0xd7, 0xff, 0x52, 0x52, 0x52, 0xff, 0x21, 0x21,
	0x21, 0xff, 0x55, 0x55, 0x55, 0xff, 0x80, 0x80, 0x80, 0xff, 0xdd, 0xdd,
	0xdd, 0xff, 0xda, 0xda, 0xda, 0xd9, 0xda, 0xda, 0xda, 0x0a, 0xda, 0xda,
	0xda, 0x00, 0xda, 0xda, 0xda, 0x00, 0xda, 0xda, 0xda, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd5, 0xd5, 0xd5, 0x00, 0xd5, 0xd5,
	0xd5, 0x00, 0xd5, 0xd5, 0xd5, 0x47, 0xd7, 0xd7, 0xd7, 0xff, 0xd9, 0xd9,
	0xd9, 0xff, 0x4b, 0x4b, 0x4b, 0xff, 0x22, 0x22, 0x22, 0xff, 0x54, 0x54,
	0x54, 0xff, 0x7c, 0x7c, 0x7c, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xde, 0xde,
	0xde, 0xfd, 0xdd, 0xdd, 0xdd, 0x3b, 0xdd, 0xdd, 0xdd, 0x00, 0xdd, 0xdd,
	0xdd, 0x00, 0xdd, 0xdd, 0xdd, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xd9, 0xd9,
	0xd9, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 0xd9, 0xd9, 0xd9, 0x00, 0xd9, 0xd9,
	0xd9, 0x88, 0xdc, 0xdc, 0xdc, 0xff, 0xdc, 0xdc, 0xdc, 0xff, 0x45, 0x45,
	0x45, 0xff, 0x22, 0x22, 0x22, 0xff, 0x54, 0x54, 0x54, 0xff, 0x79, 0x79,
	0x79, 0xff, 0xe3, 0xe3, 0xe3, 0xff, 0xe2, 0xe2, 0xe2, 0xff, 0xe0, 0xe0,
	0xe0, 0x79, 0xe0, 0xe0, 0xe0, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0xe0, 0xe0,
	0xe0, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xde, 0xde, 0xde, 0x00, 0xde, 0xde,
	0xde, 0x00, 0xde, 0xde, 0xde, 0x02, 0xde, 0xde, 0xde, 0xc4, 0xe3, 0xe3,
	0xe3, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0x41, 0x41, 0x41, 0xff, 0x23, 0x23,
	0x23, 0xff, 0x53, 0x53, 0x53, 0xff, 0x77, 0x77, 0x77, 0xff, 0xe7, 0xe7,
	0xe7, 0xff, 0xe8, 0xe8, 0xe8, 0xff, 0xe4, 0xe4, 0xe4, 0xb9, 0xe4, 0xe4,
	0xe4, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xe1, 0xe1, 0xe1, 0x00, 0xe1, 0xe1, 0xe1, 0x00, 0xe1, 0xe1,
	0xe1, 0x22, 0xe3, 0xe3, 0xe3, 0xf3, 0xe9, 0xe9, 0xe9, 0xff, 0xe1, 0xe1,
	0xe1, 0xff, 0x3c, 0x3c, 0x3c, 0xff, 0x23, 0x23, 0x23, 0xff, 0x53, 0x53,
	0x53, 0xff, 0x73, 0x73, 0x73, 0xff, 0xea, 0xea, 0xea, 0xff, 0xed, 0xed,
	0xed, 0xff, 0xe8, 0xe8, 0xe8, 0xec, 0xe7, 0xe7, 0xe7, 0x1a, 0xe7, 0xe7,
	0xe7, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xe5, 0xe5,
	0xe5, 0x00, 0xe5, 0xe5, 0xe5, 0x00, 0xe5, 0xe5, 0xe5, 0x56, 0xe8, 0xe8,
	0xe8, 0xff, 0xee, 0xee, 0xee, 0xff, 0xe1, 0xe1, 0xe1, 0xff, 0x35, 0x35,
	0x35, 0xff, 0x24, 0x24, 0x24, 0xff, 0x52, 0x52, 0x52, 0xff, 0x6f, 0x6f,
	0x6f, 0xff, 0xec, 0xec, 0xec, 0xff, 0xf1, 0xf1, 0xf1, 0xff, 0xeb, 0xeb,
	0xeb, 0xff, 0xe9, 0xe9, 0xe9, 0x4c, 0xea, 0xea, 0xea, 0x00, 0xea, 0xea,
	0xea, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xe7, 0xe7,
	0xe7, 0x00, 0xe8, 0xe8, 0xe8, 0x92, 0xec, 0xec, 0xec, 0xff, 0xf4, 0xf4,
	0xf4, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0x2f, 0x2f, 0x2f, 0xff, 0x24, 0x24,
	0x24, 0xff, 0x51, 0x51, 0x51, 0xff, 0x6b, 0x6b, 0x6b, 0xff, 0xed, 0xed,
	0xed, 0xff, 0xf4, 0xf4, 0xf4, 0xff, 0xee, 0xee, 0xee, 0xff, 0xeb, 0xeb,
	0xeb, 0x87, 0xeb, 0xeb, 0xeb, 0x00, 0xeb, 0xeb, 0xeb, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xe9, 0xe9, 0xe9, 0x00, 0xe8, 0xe8, 0xe8, 0x02, 0xea, 0xea,
	0xea, 0xc6, 0xef, 0xef, 0xef, 0xff, 0xf9, 0xf9, 0xf9, 0xff, 0xdc, 0xdc,
	0xdc, 0xff, 0x2a, 0x2a, 0x2a, 0xff, 0x25, 0x25, 0x25, 0xff, 0x51, 0x51,
	0x51, 0xff, 0x67, 0x67, 0x67, 0xff, 0xeb, 0xeb, 0xeb, 0xff, 0xf8, 0xf8,
	0xf8, 0xff, 0xf0, 0xf0, 0xf0, 0xff, 0xed, 0xed, 0xed, 0xbd, 0xeb, 0xeb,
	0xeb, 0x01, 0xeb, 0xeb, 0xeb, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xe9, 0xe9,
	0xe9, 0x00, 0xe9, 0xe9, 0xe9, 0x1e, 0xeb, 0xeb, 0xeb, 0xf0, 0xf1, 0xf1,
	0xf1, 0xff, 0xfc, 0xfc, 0xfc, 0xff, 0xd8, 0xd8, 0xd8, 0xff, 0x27, 0x27,
	0x27, 0xff, 0x25, 0x25, 0x25, 0xff, 0x50, 0x50, 0x50, 0xff, 0x62, 0x62,
	0x62, 0xff, 0xe8, 0xe8, 0xe8, 0xff, 0xfa, 0xfa, 0xfa, 0xff, 0xf2, 0xf2,
	0xf2, 0xff, 0xed, 0xed, 0xed, 0xe9, 0xeb, 0xeb, 0xeb, 0x16, 0xeb, 0xeb,
	0xeb, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xe7, 0xe7, 0xe7, 0x00, 0xe7, 0xe7,
	0xe7, 0x4a, 0xeb, 0xeb, 0xeb, 0xff, 0xf1, 0xf1, 0xf1, 0xff, 0xfd, 0xfd,
	0xfd, 0xff, 0xd2, 0xd2, 0xd2, 0xff, 0x24, 0x24, 0x24, 0xff, 0x25, 0x25,
	0x25, 0xff, 0x4e, 0x4e, 0x4e, 0xff, 0x5d, 0x5d, 0x5d, 0xff, 0xe2, 0xe2,
	0xe2, 0xff, 0xfa, 0xfa, 0xfa, 0xff, 0xf1, 0xf1, 0xf1, 0xff, 0xed, 0xed,
	0xed, 0xfe, 0xea, 0xea, 0xea, 0x42, 0xea, 0xea, 0xea, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xe4, 0xe4, 0xe4, 0x00, 0xe5, 0xe5, 0xe5, 0x79, 0xea, 0xea,
	0xea, 0xff, 0xf0, 0xf0, 0xf0, 0xff, 0xfb, 0xfb, 0xfb, 0xff, 0xcc, 0xcc,
	0xcc, 0xff, 0x22, 0x22, 0x22, 0xff, 0x25, 0x25, 0x25, 0xff, 0x4d, 0x4d,
	0x4d, 0xff, 0x59, 0x59, 0x59, 0xff, 0xdc, 0xdc, 0xdc, 0xff, 0xf9, 0xf9,
	0xf9, 0xff, 0xf0, 0xf0, 0xf0, 0xff, 0xec, 0xec, 0xec, 0xff, 0xe8, 0xe8,
	0xe8, 0x6e, 0xe7, 0xe7, 0xe7, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xe1, 0xe1,
	0xe1, 0x00, 0xe3, 0xe3, 0xe3, 0xa9, 0xe8, 0xe8, 0xe8, 0xff, 0xed, 0xed,
	0xed, 0xff, 0xf8, 0xf8, 0xf8, 0xff, 0xc5, 0xc5, 0xc5, 0xff, 0x20, 0x20,
	0x20, 0xff, 0x25, 0x25, 0x25, 0xff, 0x4b, 0x4b, 0x4b, 0xff, 0x55, 0x55,
	0x55, 0xff, 0xd4, 0xd4, 0xd4, 0xff, 0xf6, 0xf6, 0xf6, 0xff, 0xee, 0xee,
	0xee, 0xff, 0xea, 0xea, 0xea, 0xff, 0xe6, 0xe6, 0xe6, 0xa0, 0xe5, 0xe5,
	0xe5, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xdc, 0xdc, 0xdc, 0x05, 0xdf, 0xdf,
	0xdf, 0xcd, 0xe5, 0xe5, 0xe5, 0xff, 0xe9, 0xe9, 0xe9, 0xff, 0xf5, 0xf5,
	0xf5, 0xff, 0xbd, 0xbd, 0xbd, 0xff, 0x1f, 0x1f, 0x1f, 0xff, 0x25, 0x25,
	0x25, 0xff, 0x49, 0x49, 0x49, 0xff, 0x51, 0x51, 0x51, 0xff, 0xcb, 0xcb,
	0xcb, 0xff, 0xf3, 0xf3, 0xf3, 0xff, 0xea, 0xea, 0xea, 0xff, 0xe7, 0xe7,
	0xe7, 0xff, 0xe3, 0xe3, 0xe3, 0xc5, 0xe1, 0xe1, 0xe1, 0x02, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xda, 0xda, 0xda, 0x1c, 0xdd, 0xdd, 0xdd, 0xee, 0xe1, 0xe1,
	0xe1, 0xff, 0xe4, 0xe4, 0xe4, 0xff, 0xf0, 0xf0, 0xf0, 0xff, 0xb4, 0xb4,
	0xb4, 0xff, 0x1e, 0x1e, 0x1e, 0xff, 0x25, 0x25, 0x25, 0xff, 0x46, 0x46,
	0x46, 0xff, 0x4d, 0x4d, 0x4d, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0xef, 0xef,
	0xef, 0xff, 0xe6, 0xe6, 0xe6, 0xff, 0xe3, 0xe3, 0xe3, 0xff, 0xe0, 0xe0,
	0xe0, 0xe7, 0xdd, 0xdd, 0xdd, 0x14, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xd5, 0xd5,
	0xd5, 0x3a, 0xd8, 0xd8, 0xd8, 0xfd, 0xdc, 0xdc, 0xdc, 0xff, 0xde, 0xde,
	0xde, 0xff, 0xea, 0xea, 0xea, 0xff, 0xac, 0xac, 0xac, 0xff, 0x1e, 0x1e,
	0x1e, 0xff, 0x25, 0x25, 0x25, 0xff, 0x43, 0x43, 0x43, 0xff, 0x4a, 0x4a,
	0x4a, 0xff, 0xbb, 0xbb, 0xbb, 0xff, 0xeb, 0xeb, 0xeb, 0xff, 0xe2, 0xe2,
	0xe2, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0xdc, 0xdc, 0xdc, 0xfb, 0xdb, 0xdb,
	0xdb, 0x32, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xd7, 0xd7, 0xd7, 0x5c, 0xdc, 0xdc,
	0xdc, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0xe6, 0xe6,
	0xe6, 0xff, 0xa4, 0xa4, 0xa4, 0xff, 0x1d, 0x1d, 0x1d, 0xff, 0x25, 0x25,
	0x25, 0xff, 0x40, 0x40, 0x40, 0xff, 0x45, 0x45, 0x45, 0xff, 0xb3, 0xb3,
	0xb3, 0xff, 0xe7, 0xe7, 0xe7, 0xff, 0xe1, 0xe1, 0xe1, 0xff, 0xe1, 0xe1,
	0xe1, 0xff, 0xe0, 0xe0, 0xe0, 0xff, 0xdc, 0xdc, 0xdc, 0x4f, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0x90, 0x90, 0x90, 0x8a, 0x93, 0x93, 0x93, 0xff, 0xa7, 0xa7,
	0xa7, 0xff, 0xc1, 0xc1, 0xc1, 0xff, 0xdf, 0xdf, 0xdf, 0xfe, 0xa0, 0xa0,
	0xa0, 0xfe, 0x1c, 0x1c, 0x1c, 0xff, 0x25, 0x25, 0x25, 0xff, 0x3d, 0x3d,
	0x3d, 0xff, 0x41, 0x41, 0x41, 0xff, 0xad, 0xad, 0xad, 0xff, 0xe3, 0xe3,
	0xe3, 0xff, 0xcf, 0xcf, 0xcf, 0xff, 0xbe, 0xbe, 0xbe, 0xff, 0xa8, 0xa8,
	0xa8, 0xff, 0x95, 0x95, 0x95, 0x7a, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x5b, 0x5b,
	0x5b, 0xaf, 0x3c, 0x3c, 0x3c, 0xff, 0x2d, 0x2d, 0x2d, 0xff, 0x30, 0x30,
	0x30, 0xff, 0x47, 0x47, 0x47, 0xff, 0x49, 0x49, 0x49, 0xff, 0x22, 0x22,
	0x22, 0xff, 0x25, 0x25, 0x25, 0xff, 0x39, 0x39, 0x39, 0xff, 0x44, 0x44,
	0x44, 0xff, 0x69, 0x69, 0x69, 0xff, 0x71, 0x71, 0x71, 0xff, 0x61, 0x61,
	0x61, 0xff, 0x5b, 0x5b, 0x5b, 0xff, 0x58, 0x58, 0x58, 0xff, 0x59, 0x59,
	0x59, 0xa8, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x62, 0x62, 0x62, 0xc9, 0x45, 0x45,
	0x45, 0xff, 0x31, 0x31, 0x31, 0xff, 0x28, 0x28, 0x28, 0xff, 0x22, 0x22,
	0x22, 0xff, 0x1f, 0x1f, 0x1f, 0xff, 0x25, 0x25, 0x25, 0xff, 0x25, 0x25,
	0x25, 0xff, 0x36, 0x36, 0x36, 0xff, 0x44, 0x44, 0x44, 0xff, 0x48, 0x48,
	0x48, 0xff, 0x4e, 0x4e, 0x4e, 0xff, 0x57, 0x57, 0x57, 0xff, 0x5c, 0x5c,
	0x5c, 0xff, 0x5f, 0x5f, 0x5f, 0xff, 0x60, 0x60, 0x60, 0xc9, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0x62, 0x62, 0x62, 0x5b, 0x45, 0x45, 0x45, 0xcb, 0x32, 0x32,
	0x32, 0xff, 0x2b, 0x2b, 0x2b, 0xff, 0x27, 0x27, 0x27, 0xff, 0x24, 0x24,
	0x24, 0xff, 0x24, 0x24, 0x24, 0xff, 0x25, 0x25, 0x25, 0xff, 0x32, 0x32,
	0x32, 0xff, 0x40, 0x40, 0x40, 0xff, 0x4a, 0x4a, 0x4a, 0xff, 0x53, 0x53,
	0x53, 0xff, 0x58, 0x58, 0x58, 0xff, 0x5c, 0x5c, 0x5c, 0xff, 0x5f, 0x5f,
	0x5f, 0xd2, 0x60, 0x60, 0x60, 0x68, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x62, 0x62,
	0x62, 0x00, 0x45, 0x45, 0x45, 0x07, 0x31, 0x31, 0x31, 0x51, 0x28, 0x28,
	0x28, 0xb5, 0x27, 0x27, 0x27, 0xfd, 0x24, 0x24, 0x24, 0xff, 0x24, 0x24,
	0x24, 0xff, 0x24, 0x24, 0x24, 0xff, 0x2f, 0x2f, 0x2f, 0xff, 0x3c, 0x3c,
	0x3c, 0xff, 0x48, 0x48, 0x48, 0xff, 0x4f, 0x4f, 0x4f, 0xfc, 0x57, 0x57,
	0x57, 0xb4, 0x5c, 0x5c, 0x5c, 0x52, 0x5f, 0x5f, 0x5f, 0x0a, 0x60, 0x60,
	0x60, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x62, 0x62, 0x62, 0x00, 0x45, 0x45,
	0x45, 0x00, 0x36, 0x36, 0x36, 0x00, 0x50, 0x50, 0x50, 0x08, 0x49, 0x49,
	0x49, 0xde, 0x28, 0x28, 0x28, 0xff, 0x24, 0x24, 0x24, 0xff, 0x24, 0x24,
	0x24, 0xff, 0x2b, 0x2b, 0x2b, 0xff, 0x38, 0x38, 0x38, 0xff, 0x3d, 0x3d,
	0x3d, 0xff, 0x3a, 0x3a, 0x3a, 0xdb, 0x43, 0x43, 0x43, 0x06, 0x58, 0x58,
	0x58, 0x00, 0x5f, 0x5f, 0x5f, 0x00, 0x60, 0x60, 0x60, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0x61, 0x61, 0x61, 0x00, 0x48, 0x48, 0x48, 0x00, 0x64, 0x64,
	0x64, 0x00, 0x70, 0x70, 0x70, 0x03, 0x52, 0x52, 0x52, 0xc4, 0x2d, 0x2d,
	0x2d, 0xff, 0x24, 0x24, 0x24, 0xff, 0x25, 0x25, 0x25, 0xff, 0x30, 0x30,
	0x30, 0xff, 0x37, 0x37, 0x37, 0xff, 0x36, 0x36, 0x36, 0xff, 0x35, 0x35,
	0x35, 0xcf, 0x34, 0x34, 0x34, 0x05, 0x39, 0x39, 0x39, 0x00, 0x5a, 0x5a,
	0x5a, 0x00, 0x61, 0x61, 0x61, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x65, 0x65,
	0x65, 0x00, 0x46, 0x46, 0x46, 0x00, 0x62, 0x62, 0x62, 0x00, 0x67, 0x67,
	0x67, 0x00, 0x4c, 0x4c, 0x4c, 0x1c, 0x2a, 0x2a, 0x2a, 0xb0, 0x24, 0x24,
	0x24, 0xff, 0x26, 0x26, 0x26, 0xff, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
	0x36, 0xff, 0x33, 0x33, 0x33, 0xb3, 0x36, 0x36, 0x36, 0x2b, 0x37, 0x37,
	0x37, 0x00, 0x36, 0x36, 0x36, 0x00, 0x3c, 0x3c, 0x3c, 0x00, 0x60, 0x60,
	0x60, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x42, 0x42, 0x42, 0x00, 0x27, 0x27,
	0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x28, 0x28, 0x28, 0x00, 0x26, 0x26,
	0x26, 0x00, 0x24, 0x24, 0x24, 0x88, 0x24, 0x24, 0x24, 0x75, 0x26, 0x26,
	0x26, 0xa8, 0x37, 0x37, 0x37, 0xa9, 0x2e, 0x2e, 0x2e, 0x8e, 0x23, 0x23,
	0x23, 0x71, 0x29, 0x29, 0x29, 0x00, 0x2e, 0x2e, 0x2e, 0x00, 0x2d, 0x2d,
	0x2d, 0x00, 0x2c, 0x2c, 0x2c, 0x00, 0x53, 0x53, 0x53, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0x21, 0x21, 0x21, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24,
	0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24,
	0x24, 0x68, 0x24, 0x24, 0x24, 0x92, 0x26, 0x26, 0x26, 0x0a, 0x30, 0x30,
	0x30, 0x10, 0x25, 0x25, 0x25, 0xa2, 0x24, 0x24, 0x24, 0x52, 0x24, 0x24,
	0x24, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x21, 0x21,
	0x21, 0x00, 0x31, 0x31, 0x31, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0x24, 0x24,
	0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24,
	0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24, 0x24, 0x03, 0x24, 0x24,
	0x24, 0x7d, 0x24, 0x24, 0x24, 0xb0, 0x24, 0x24, 0x24, 0xb1, 0x24, 0x24,
	0x24, 0x71, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24,
	0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x24, 0x24, 0x24, 0x00, 0x23, 0x23,
	0x23, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
	0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0,
	0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xc0,
	0x07, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x03, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80,
	0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0x00,
	0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00,
	0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00,
	0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xe0,
	0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf8,
	0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff}

var (
	isFlashing bool = true
)

func OnTrayDbClick() {
	openDebugWin()
}

func onReady() {
	systray.SetIcon(icon.Data)
	systray.SetTitle("PostMan-消息模拟")
	systray.SetTooltip("消息模拟")
	systray.RegisterDbClick(OnTrayDbClick)

	mDebug := systray.AddMenuItem("打开调试页", "打开调试页")
	// 你可以添加一个分隔符
	systray.AddSeparator()

	mQuit := systray.AddMenuItem("退出", "退出")

	// 设置菜单项的图标（可选）
	mDebug.SetIcon(icon.Data)
	mQuit.SetIcon(icon.Data)

	// 我们可以操作菜单项
	go func() {
		for {
			select {
			case <-mQuit.ClickedCh:
				fmt.Println("Requesting quit")
				systray.Quit()
				return
			case <-mDebug.ClickedCh:
				fmt.Println("Showing info")
				openDebugWin()
			}
		}
	}()

	go startServer()
}

const flashInterval = 200 * time.Millisecond

func handleFlash() {
	ticker := time.NewTicker(flashInterval)
	defer ticker.Stop()

	isNormalIcon := true
	for range ticker.C {
		if isFlashing {
			if isNormalIcon {
				systray.SetIcon(icon.Data)
				fmt.Println("icon.Data", time.Now())
			} else {
				systray.SetIcon(GrayDat)
				fmt.Println("icon.GrayData", time.Now())
			}
			isNormalIcon = !isNormalIcon
		}
	}
}

func openDebugWin() {
	url := "http://localhost:8080/static/index.html"
	var err error
	err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	if err != nil {
		fmt.Printf("Error opening browser: %v\n", err)
	}

}

func onExit() {
	fmt.Println("Exiting...")
	os.Exit(0)
}

func mockHttpRoute(c *gin.Context) {
	fmt.Println("---header ", c.Request.Header)
	body, _ := io.ReadAll(c.Request.Body)
	fmt.Println("---request.data ", string(body))

	sendApp := c.GetHeader("CamelMllpSendingApplication")
	uuidStr := uuid.New().String()

	if sendApp != "" {
		responseBody := strings.ReplaceAll(string(body), "PACS", "xxxx")
		c.Header("traceId111", uuidStr)
		c.Header("time", fmt.Sprintf("%f", float64(time.Now().UnixNano())/1e9))
		c.Header("CamelMllpSendingApplication", sendApp+"_ABC")
		c.Data(http.StatusOK, "application/octet-stream", []byte(responseBody))
	} else {
		fmt.Println("---raw data:", string(body))
		c.Data(http.StatusOK, "application/octet-stream", body)
	}
}

// httpRoute 处理HTTP请求。
// 它解析传入的JSON数据，提取请求头、方法、URL和请求体，
// 并使用这些信息构造一个新的HTTP请求。
// 然后，它发送请求并读取服务器的响应，将响应返回给客户端。
func httpRoute(c *gin.Context) {
	var data map[string]interface{}
	if err := c.BindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": 400, "errMsg": err.Error(), "resp": ""})
		return
	}

	header := make(http.Header)
	if reqHeaders, ok := data["req_headers"].(map[string]interface{}); ok {
		for k, v := range reqHeaders {
			header.Set(k, fmt.Sprint(v))
		}
	}

	method := data["method"].(string)
	url := data["url"].(string)
	reqBody := []byte(data["req"].(string))

	req, err := http.NewRequest(method, url, bytes.NewBuffer(reqBody))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": err.Error(), "resp": ""})
		return
	}
	req.Header = header

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": err.Error(), "resp": ""})
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	var jsonResp interface{}
	if err := json.Unmarshal(body, &jsonResp); err != nil {
		jsonResp = string(body)
	}

	c.JSON(http.StatusOK, gin.H{"status": resp.StatusCode, "errMsg": "", "resp": jsonResp})
}

// mllpRoute handles MLLP requests.
// It parses the incoming JSON data, extracts the host and port from the URL,
// and sends the request to the specified URL using the MLLP protocol.
// The response from the server is then read and returned in the response body.``

func mllpRoute(c *gin.Context) {
	var data map[string]string
	if err := c.BindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": 400, "errMsg": err.Error(), "resp": ""})
		return
	}

	host, port, found := strings.Cut(data["url"], ":")
	if !found {
		c.JSON(http.StatusBadRequest, gin.H{"status": 400, "errMsg": "Invalid URL format", "resp": ""})
		return
	}

	response, err := sendMllpMessage(host, port, data["req"])
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": err.Error(), "resp": ""})
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": 200, "errMsg": "", "resp": string(response)})
}

// soapRoute handles SOAP requests.
// It parses the incoming JSON data, constructs a new HTTP POST request with the SOAPAction and Content-Type headers set,
// and sends the request to the specified URL.
// The response from the server is then read and returned in the response body.

func soapRoute(c *gin.Context) {
	var data map[string]string
	if err := c.BindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": 400, "errMsg": err.Error(), "resp": ""})
		return
	}

	url := data["url"]
	payload := data["req"]
	fmt.Println("--soap ", payload)

	req, err := http.NewRequest("POST", url, strings.NewReader(payload))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": err.Error(), "resp": ""})
		return
	}

	req.Header.Set("SOAPAction", "")
	req.Header.Set("Content-Type", "application/xml;charset=UTF-8")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": err.Error(), "resp": ""})
		return
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	c.JSON(http.StatusOK, gin.H{"status": resp.StatusCode, "errMsg": "", "resp": string(body)})
}

// sendMllpMessage sends an HL7 message using the Minimal Lower Layer Protocol (MLLP).
// It constructs the message by wrapping the provided message string with MLLP start and end blocks.
// The function connects to the specified host and port, sends the constructed message, and reads the response.
// Parameters:
// - host: The host to connect to.
// - port: The port to connect to on the host.
// - message: The HL7 message to send.
// Returns:
// - []byte: The response from the server, with MLLP start and end blocks removed and line endings adjusted.
// - error: An error if any occurred during the process.

func sendMllpMessage(host, port, message string) ([]byte, error) {
	startBlock := []byte{0x0b}
	endBlock := []byte{0x1c}
	endData := []byte{0x0d}

	conn, err := net.Dial("tcp", net.JoinHostPort(host, port))
	if err != nil {
		return nil, err
	}
	defer conn.Close()

	req := strings.ReplaceAll(message, "\n", "\r")
	_, err = conn.Write(append(append(append(startBlock, []byte(req)...), endBlock...), endData...))
	if err != nil {
		return nil, err
	}

	data := make([]byte, 10240)
	n, err := conn.Read(data)
	if err != nil {
		return nil, err
	}

	data = data[1 : n-2]
	return []byte(strings.ReplaceAll(string(data), "\r", "\r\n")), nil
}

// 补充中文注释
func wsdlMethods(c *gin.Context) {
	var data struct {
		URL string `json:"url"`
	}

	if err := c.BindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": 400, "errMsg": err.Error(), "resp": ""})
		return
	}

	wsdlURL := data.URL

	// 获取 WSDL 内容
	resp, err := http.Get(wsdlURL)
	fmt.Println("wsdl url", wsdlURL)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": fmt.Sprintf("Failed to fetch WSDL: %v", err), "resp": ""})
		return
	}
	defer resp.Body.Close()

	wsdlContent, err := io.ReadAll(resp.Body)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": fmt.Sprintf("Failed to read WSDL content: %v", err), "resp": ""})
		return
	}

	wsdl := gowsdl.WSDL{}
	// 解析 WSDL
	err = xml.Unmarshal(wsdlContent, &wsdl)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": 500, "errMsg": fmt.Sprintf("Failed to parse WSDL: %v", err), "resp": ""})
		return
	}

	// 提取方法名
	var methods []string
	for _, binding := range wsdl.Binding {
		for _, operation := range binding.Operations {
			methods = append(methods, operation.Name)
		}
	}

	// 返回结果
	c.JSON(http.StatusOK, gin.H{"status": 200, "errMsg": "", "resp": methods})
}

// CreateServer 处理创建新服务器的请求
func (ds *DynamicServer) CreateServer(c *gin.Context) {

	var req CreateServerReq

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if req.Data == "" {
		req.Data = "default mock data"
	}

	ds.serversMutex.Lock()
	defer ds.serversMutex.Unlock()

	if _, exists := ds.servers[req.Port]; exists {
		c.JSON(http.StatusConflict, gin.H{"error": "Server already exists on this port"})
		return
	}

	switch req.Type {
	case "http":
		go ds.startHTTPServer(&req)
	default:
		c.JSON(http.StatusBadRequest, gin.H{"error": "Unsupported server type"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": fmt.Sprintf("%s server started on port %d", req.Type, req.Port)})
}

// startHTTPServer 启动一个新的 HTTP 服务器
func (ds *DynamicServer) startHTTPServer(req *CreateServerReq) {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		body, _ := io.ReadAll(r.Body)
		msg := WSMessage{
			Action: "request",
			Port:   req.Port,
			Data: map[string]interface{}{
				"method":     r.Method,
				"url":        r.URL.String(),
				"headers":    r.Header,
				"body":       string(body),
				"mockData":   req.Data,
				"mockHeader": req.Headers,
			},
		}

		ds.broadcastToWebSockets(msg)
		for key, value := range req.Headers {
			w.Header().Set(key, value)
		}
		w.WriteHeader(http.StatusOK)

		w.Write([]byte(req.Data))
	})

	server := &http.Server{
		Addr:    ":" + strconv.Itoa(req.Port),
		Handler: mux,
	}

	ds.serversMutex.Lock()
	ds.servers[req.Port] = server
	ds.serverConfigs[req.Port] = req
	ds.serversMutex.Unlock()

	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		fmt.Printf("Error starting server on port %d: %v\n", req.Port, err)
	}
}

// HandleWebSocket 处理 WebSocket 连接
func (ds *DynamicServer) HandleWebSocket(c *gin.Context) {
	conn, err := ds.upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		fmt.Printf("Failed to upgrade to WebSocket: %v\n", err)
		return
	}

	ds.wsConnMutex.Lock()
	ds.wsConnections[conn] = make(map[int]bool)
	ds.wsConnMutex.Unlock()

	defer func() {
		ds.wsConnMutex.Lock()
		delete(ds.wsConnections, conn)
		ds.wsConnMutex.Unlock()
		conn.Close()
	}()

	for {
		var msg WSMessage
		err := conn.ReadJSON(&msg)
		if err != nil {
			break
		}

		switch msg.Action {
		case "subscribe":
			ds.wsConnMutex.Lock()
			ds.wsConnections[conn][msg.Port] = true
			ds.wsConnMutex.Unlock()
		case "unsubscribe":
			ds.wsConnMutex.Lock()
			delete(ds.wsConnections[conn], msg.Port)
			ds.wsConnMutex.Unlock()
		}
	}
}

// broadcastToWebSockets 向订阅的 WebSocket 连接广播消息
func (ds *DynamicServer) broadcastToWebSockets(msg WSMessage) {
	jsonMsg, err := json.Marshal(msg)
	if err != nil {
		fmt.Printf("Error marshalling message: %v\n", err)
		return
	}

	ds.wsConnMutex.RLock()
	defer ds.wsConnMutex.RUnlock()

	for conn, ports := range ds.wsConnections {
		if ports[msg.Port] {
			err := conn.WriteMessage(websocket.TextMessage, jsonMsg)
			if err != nil {
				fmt.Printf("Error sending WebSocket message: %v\n", err)
				conn.Close()
				delete(ds.wsConnections, conn)
			}
		}
	}
}

// ListServers 列出所有动态创建的服务器
func (ds *DynamicServer) ListServers(c *gin.Context) {
	ds.serversMutex.Lock()
	defer ds.serversMutex.Unlock()

	var serverList []map[string]interface{}
	for port, server := range ds.servers {
		serverList = append(serverList, map[string]interface{}{
			"port":   port,
			"status": "Running",
			"addr":   server.Addr,
		})
	}

	c.JSON(http.StatusOK, gin.H{"servers": serverList})
}

// StopServer 关闭指定端口的服务器
func (ds *DynamicServer) StopServer(c *gin.Context) {
	var req struct {
		Port int `json:"port"`
	}

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ds.serversMutex.Lock()
	defer ds.serversMutex.Unlock()

	server, exists := ds.servers[req.Port]
	if !exists {
		c.JSON(http.StatusNotFound, gin.H{"error": "Server not found on this port"})
		return
	}

	if err := server.Shutdown(context.Background()); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to stop server on port %d: %v", req.Port, err)})
		return
	}

	delete(ds.servers, req.Port)

	c.JSON(http.StatusOK, gin.H{"message": fmt.Sprintf("Server on port %d has been stopped", req.Port)})
}

// UpdateServer 更新指定端口的服务器配置
func (ds *DynamicServer) UpdateServer(c *gin.Context) {
	var req CreateServerReq

	if err := c.BindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ds.serversMutex.Lock()
	defer ds.serversMutex.Unlock()

	serverConfig, exists := ds.serverConfigs[req.Port]
	if !exists {
		c.JSON(http.StatusNotFound, gin.H{"error": "Server not found on this port"})
		return
	}

	// 更新除了端口号之外的配置
	serverConfig.Data = req.Data
	serverConfig.Headers = req.Headers

	fmt.Println("serverConfig.Data = ", req.Data)

	c.JSON(http.StatusOK, gin.H{"message": fmt.Sprintf("Server on port %d has been updated", req.Port)})
}

// GetServerConfig 获取指定端口的服务器配置信息
func (ds *DynamicServer) GetServerConfig(c *gin.Context) {
	portStr := c.Query("port")
	fmt.Println("request port ", portStr)
	port, err := strconv.Atoi(portStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid port number"})
		return
	}

	ds.serversMutex.Lock()
	defer ds.serversMutex.Unlock()

	serverConfig, exists := ds.serverConfigs[port]
	if !exists {
		c.JSON(http.StatusNotFound, gin.H{"error": "Server not found on this port"})
		return
	}

	fmt.Println("")

	c.JSON(http.StatusOK, serverConfig)
}
